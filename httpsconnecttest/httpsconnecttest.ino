// Kyle Santos
// Code adapted from https://randomnerdtutorials.com/esp32-http-get-open-weather-map-thingspeak-arduino/
// 9-26-24

#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <HTTPClient.h>
#include <Arduino_JSON.h>
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
// The pins for I2C are defined by the Wire-library. 
// On an arduino UNO:       A4(SDA), A5(SCL)
// On an arduino MEGA 2560: 20(SDA), 21(SCL)
// On an arduino LEONARDO:   2(SDA),  3(SCL), ...
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3D ///< See datasheet for Address; 0x3D for 128x64,0x3C for 128x32
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

const char* ssid = "spl-public";
const char* password = "shaqattack34!";

//Your Domain name with URL path or IP address with path
const char* server = "https://eink-infoboard.onrender.com";

const char* root_ca = \
"-----BEGIN CERTIFICATE-----\n" \
"MIICCjCCAZGgAwIBAgIQbkepyIuUtui7OyrYorLBmTAKBggqhkjOPQQDAzBHMQsw\n" \
"CQYDVQQGEwJVUzEiMCAGA1UEChMZR29vZ2xlIFRydXN0IFNlcnZpY2VzIExMQzEU\n" \
"MBIGA1UEAxMLR1RTIFJvb3QgUjQwHhcNMTYwNjIyMDAwMDAwWhcNMzYwNjIyMDAw\n" \
"MDAwWjBHMQswCQYDVQQGEwJVUzEiMCAGA1UEChMZR29vZ2xlIFRydXN0IFNlcnZp\n" \
"Y2VzIExMQzEUMBIGA1UEAxMLR1RTIFJvb3QgUjQwdjAQBgcqhkjOPQIBBgUrgQQA\n" \
"IgNiAATzdHOnaItgrkO4NcWBMHtLSZ37wWHO5t5GvWvVYRg1rkDdc/eJkTBa6zzu\n" \
"hXyiQHY7qca4R9gq55KRanPpsXI5nymfopjTX15YhmUPoYRlBtHci8nHc8iMai/l\n" \
"xKvRHYqjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MB0GA1Ud\n" \
"DgQWBBSATNbrdP9JNqPV2Py1PsVq8JQdjDAKBggqhkjOPQQDAwNnADBkAjBqUFJ0\n" \
"CMRw3J5QdCHojXohw0+WbhXRIjVhLfoIN+4Zba3bssx9BzT1YBkstTTZbyACMANx\n" \
"sbqjYAuG7ZoIapVon+Kz4ZNkfF6Tpt95LY2F45TPI11xzPKwTdb+mciUqXWi4w==\n" \
"-----END CERTIFICATE-----\n";

WiFiClientSecure client;

void setup() {
  Serial.begin(115200);
  delay(100);

  // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }

    // Show initial display buffer contents on the screen --
  // the library initializes this with an Adafruit splash screen.
  display.display();
  delay(1000); // Pause for 2 seconds

  // Clear the buffer
  display.clearDisplay();

  WiFi.begin(ssid, NULL);
  Serial.println("Connecting");
  while(WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(1000);
  }
  Serial.println("");
  Serial.print("Connected to network with IP Address: ");
  Serial.println(WiFi.localIP());

  // USING INSECURE
  //client.setCACert(root_ca);
  client.setInsecure();

  // if(WiFi.status()== WL_CONNECTED){
  //   String content = httpGETRequest(server);
  //   Serial.println(content);
  //   // JSONVar pokeInfo = JSON.parse(content);
  // }

  Serial.println("\nStarting connection to server...");
  if (!client.connect(server, 443))
    Serial.println("Connection failed!");
  else {
    Serial.println("Connected to server!");
    // Make a HTTP request:
    client.println("GET https://eink-infoboard.onrender.com/sprite HTTP/1.0");
    client.println("Host: eink-infoboard.onrender.com");
    client.println("Connection: close");
    client.println();

    while (client.connected()) {
      String line = client.readStringUntil('\n');
      if (line == "\r") {
        Serial.println("headers received");
        break;
      }
    }
    // if there are incoming bytes available
    // from the server, read them and print them:
    uint8_t* content = "";
    while (client.available()) {
      char c = client.read();
      content.concat(c);
    }
    // Serial.println("printing content: ");
    // Serial.println(content);
    client.stop();

    // Parse JSON
    // JSONVar pokeInfo = JSON.parse(content);

    // if (JSON.typeof(pokeInfo) == "undefined") {
    //   Serial.println("Parsing content json failed");
    //   return;
    // }

    // Serial.println(pokeInfo["firstAppearance"]);
    // Serial.println(pokeInfo["height"]);
    // Serial.println(pokeInfo["id"]);
    // Serial.println(pokeInfo["sprite"]);
    // char* pkmnsprite = (char*) pokeInfo["sprite"];
    // const char* imgashex PROGMEM = "0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0x01,0x00,0x00,0x00,0x00,0x66,0x00,0xf3,0x7f,0x00,0x00,0x00,0x00,0x66,0x00,0xf3,0x7f,0x00,0x00,0x00,0x00,0x7e,0x00,0xf3,0x07,0x00,0x00,0x00,0x80,0x1f,0x00,0xff,0x01,0x00,0x00,0x00,0x80,0x1f,0x00,0xff,0x01,0x00,0x00,0x3c,0xf8,0x19,0xcc,0xff,0x01,0x00,0x00,0x3c,0xf8,0x19,0xcc,0xff,0x01,0x00,0x00,0xf0,0x1e,0x00,0xcc,0xc0,0x01,0x00,0x00,0xc0,0x06,0x00,0xfc,0x00,0x00,0x00,0x00,0xc0,0x06,0x00,0xfc,0x00,0x00,0x00,0x00,0xc0,0x06,0x00,0x30,0x00,0x00,0x00,0x00,0xf0,0x00,0x00,0x00,0x00,0x1f,0x00,0x00,0xf0,0x00,0x00,0x00,0x00,0x1f,0x00,0x00,0x00,0x00,0x00,0x0c,0xc0,0x01,0x00,0x00,0x00,0x00,0x00,0x0c,0xc0,0x01,0x00,0x00,0x00,0x00,0x78,0x0f,0xfc,0x00,0x00,0x00,0x00,0x1e,0x98,0x03,0x00,0x00,0x00,0x00,0x00,0x1e,0x98,0x03,0x00,0x00,0x00,0x00,0x00,0x1f,0x9e,0x3c,0x00,0x00,0x00,0x00,0x00,0x9f,0x7f,0xff,0x00,0x00,0x00,0x00,0x00,0x9f,0x7f,0xff,0x00,0x00,0x00,0x00,0x00,0x99,0x7f,0xff,0x00,0x00,0x00,0x00,0x00,0x99,0x7f,0xff,0x00,0x00,0x00,0x00,0x00,0x9f,0x9f,0xf3,0x00,0x00,0x00,0x00,0x00,0x9f,0x9f,0x3f,0x00,0x00,0x00,0x00,0x00,0x9f,0x9f,0x3f,0x00,0x00,0x00,0x00,0xc0,0x9e,0x9f,0x3f,0x00,0x00,0x00,0x00,0xc0,0xe1,0x7f,0x0f,0x00,0x00,0x00,0x00,0xc0,0xe1,0x7f,0x0f,0x00,0x00,0x00,0x00,0xc0,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0xc0,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0x0f,0x00,0x00,0x00,0x00,0x00,0xfe,0xff,0x03,0x00,0x00,0x00,0x00,0x00,0xf8,0x7f,0x03,0x30,0x00,0x00,0x00,0x00,0xf8,0x7f,0x03,0x30,0x00,0x00,0x00,0x00,0x80,0x7f,0x00,0xf0,0x00,0x00,0x00,0x00,0x80,0x7f,0x00,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x01,0x00,0x00,0x00,0x00,0x00,0x00,0xf0,0x01,0x00,0x00,0x00,0x06,0x00,0x0c,0x00,0x87,0x07,0x00,0x00,0x00,0x60,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x00,0x00,0x18,0x80,0x0f,0x00,0xe0,0xf9,0xff,0x03,0x00,0x80,0x0f,0x00,0xe0,0xf9,0xff,0x03,0x00,0x80,0x0f,0x00,0xf8,0x1f,0xff,0x03,0x00,0x78,0x00,0x00,0xf8,0xe7,0xfc,0xf0,0x00,0x00,0x00,0x00,0xf8,0xe7,0xfc,0xf0,0x00,0x00,0x00,0x00,0x78,0x60,0xf0,0x30,0x00,0x00,0x00,0x00,0x78,0x60,0xf0,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0xe0,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00";
    // const unsigned char bitmapbits [] PROGMEM = hexStringToArray(imgashex);
    // Serial.println(pokeInfo["name"]);
    // Serial.println(pokeInfo["types"]);
    // Serial.println(pokeInfo["weight"]);



    // display.println("test");
    display.drawBitmap(0, 0, &content, 64, 64, SSD1306_WHITE);

    display.display();
  }
}

void loop() {
  // put your main code here, to run repeatedly:

}

// const unsigned char[]* hexStringToArray(String imstring, width, height) {
//   const unsigned char res[width * height];
//   int i = 0;
//   while (i < imstring.length) {
//     res[i]
//   }
// }